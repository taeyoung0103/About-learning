HTTP와 HTTPS ?

HTTP = Hyper Text Transfer Protocol
	서버/클라이언트 모델을 따라 데이터를 주고 받기 위한 프로토콜
	암호화가 되지않은 평문 데이터를 전송하는 프로토콜이라서 HTTP로 주민번호나 비밀번호 등을 주고받으면 
	제 3자가 정보를 조회할 수 있기 때문에 암호화가 추가된 HTTPS가 개발되었다.

HTTPS = Hyper Text Transfer Protocol Secure
	HTTP에 데이터 암호화가 추가된 프로토콜이며, 네트워크상에서 중간에 제3자가 정보를 조회할 수 없도록 
	공개키 암호화를 지원한다.
	공개키/개인키 암호화 방식을 이용해 데이터를 암호화한다.
	공개키 - 모두에게 공개가능한 키
	개인키 - 나만 가지고 알고 있어야 하는 키

-------------------------------------------------------
JS
==와 ===

== 는 Equal Operator이고, === 는 Strict Equal Operator이다.
즉, ==는 값만 같으면 true가 찍힐 수 있으나, === 는 값과 값의 종류까지 같아야한다.
예를 들어 var(변수이름) a = 1; var b = "1"; 일때 
console.log(a==b);  를 실행하면 true가 출력된다. 하지만
console.log(a===b); 를 실행하면 false가 출력된다.
왜냐하면 1과 "1"은 타입이 다르기 때문이다. 1은 int(정수), "1"은 str(문자형)이기 때문이다.
마찬가지로 null과 undefined는 공통적으로 값이 없음을 뜻하지만, 값의 종류는 다르다. 그래서
console.log(null == undefined); 는 true가 출력되지만 
console.log(null === undefined); 는 false가 출력된다.

배열의 경우도 살펴보자
var a = [1, 2, 3]; ,  var b =[1, 2, 3]; 일 때 
console.log(a==b); 의 결과는 false,
console.log(a===b); 의 결과도 false로 나온다.
이유는 배열을 할당할 때 각 변수는 각 메모리의 주소를 참조한다. 두 변수 a, b 의 값과 데이터 타입은 같지만 
이와 상관없이 참조하는 메모리의 주소가 다르기 때문에 두 a,b는 같지 않다.
그러나 var c = b; 로 새로운 변수 c에 변수 b를 할당해주면, 변수 c도 b가 참조하는 같은 메모리의 주소를 참조하게 되어,
두 변수 c, b는 같다. ==와 ===의 결과값도 true로 나온다.
console.log(c==b);  =>  true
console.log(c===b);  =>  true


null, undefined, undeclared 차이
- undefined = 변수가 선언되었으나 아무런 값도 할당되지 않은 상태
- undeclared = 변수선언조차 되어있지 않은 상태
- null = 변수를 선언하고 null이라는 빈값을 할당한 상태







