#단순 경고 메세지 skip할수 있게 하는 설정
import warnings
warnings.filterwarnings('ignore')
import numpy as np
import pandas as pd
import re

#avg18.07.csv 파일을 read : 변수명 pre_sale
pre_sale = pd.read_csv('dataset/aptPriceDataSet/avg18.07.csv', encoding="utf-8")

print(pre_sale.shape)
# 분양 가격에는 null값 보유 따라서 null 개수를 제외한 유효한 데이터 개수 확인
print(pre_sale.info())

# 해당 컬럼의 null 개수의 합
pre_sale['지역명'].isnull().sum()

#각 컬럼명 type 확인 
pre_sale.dtypes

# 분양가격(㎡) 값만 검색해 보기
pre_sale['분양가격(㎡)']

#분양가격 새로운 컬럼 생성(타입은 숫자 왜? 연산 수행)
#숫자 타입인 분양 가격을 기반으로 평당분양가격 컬럼 생성
# * 3.3
'''
   errors="coerce" : 에러가 발생시 무시
   errors="raise: 에러 발생시 표현   
'''
pre_sale['분양가격'] = pd.to_numeric(pre_sale_price, errors='coerce')


pre_sale['분양가격'].dtype
출력시 - dtype('float64')

pre_sale['분양가격(㎡)'].dtype
출력시 - dtype('O')

type(pre_sale['분양가격(㎡)'])
출력시 - pandas.core.series.Series

# object 타입에 한해서만 기초 통계
pre_sale.describe(include=[np.int64])
출력시
          	연도	   월
count	2890.000000	2890.000000
mean	2016.676471	6.382353
std	0.898539    	3.515406
min	2015.000000	1.000000
25%	2016.000000	3.000000
50%	2017.000000	6.000000
75%	2017.000000	10.000000
max	2018.000000	12.000000


# 연도가 2017년도 데이터 존재 여부 확인
pre_sale['연도']==2017

# 2017년도 데이터 row, column 수 검색
pre_sale_2017.shape

# 지역명별 개수
# select distinct 지역명 from pre_sale
pre_sale['지역명'].value_counts()


1  피벗(Pivot) 테이블이란 많은 양의 데이터에서 필요한 자료만을 뽑아 새롭게 표를 작성해 주는 기능입니다
df = pd.DataFrame({"A": ["foo", "foo", "foo", "foo", "foo",
...                          "bar", "bar", "bar", "bar"],
...                    "B": ["one", "one", "one", "two", "two",
...                          "one", "one", "two", "two"],
...                    "C": ["small", "large", "large", "small",
...                          "small", "large", "small", "small",
...                          "large"],
...                    "D": [1, 2, 2, 3, 3, 4, 5, 6, 7],
...                    "E": [2, 4, 5, 5, 6, 6, 8, 9, 9]})

df - 출력시 ->
   A	 B    C  	D	E
0	foo	one	small	1	2
1	foo	one	large	2	4
2	foo	one	large	2	5
3	foo	two	small	3	5
4	foo	two	small	3	6
5	bar	one	large	4	6
6	bar	one	small	5	8
7	bar	two	small	6	9
8	bar	two	large	7	9


table = df.pivot_table(values='D', index=['A', 'B'], 
                       columns=['C'], aggfunc=np.sum)
table
	C	large	small
A	B		
bar	one	4.0	5.0
    two	7.0	6.0
foo	one	4.0	1.0
    two	NaN	6.0
    

# 2018년도에서 2015년도 변동액 연산해 보기
yearUp['변동액'] = yearUp[2018]-yearUp[2015]
yearUp

