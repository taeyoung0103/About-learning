(Jupyter Notebook을 사용한다.)


Pandas
- 파이썬 데이터 처리를 위한 라이브러리 (필수)
- pd로 줄여서 사용한다.

NumPy 
- 행렬이나 일반적으로 대규모 다차원 배열을 쉽게 처리 할 수 있도록 지원하는 파이썬의 라이브러리
- np로 줄여서 사용한다.


s = pd.Series([1, 2, 3])  # 시리즈 객체
s 입력후 출력시 행렬로 다음과 같이 나온다.

0     1
1     2
2     3


# 결측치 - 데이터 값이 없음을 의미, nan(Not a Number)
# Not a Number : js에서 숫자가 아님을 의미하는 표현법
# python에서는 결측치 의미

# 명시적으로 시리즈에 결측치 적용
# numpy api 결측치 표현 : np.nan

# 데이터를 관리하기 위해서는 간혹 결측치도 임의로 생성해야 할 경우도 있음

s = pd.Series([1, np.nan, 3, 5, 6, np.nan])
s 입력후 출력시 행렬로 다음과 같이 나온다.

0    1.0
1    NaN
2    3.0
3    5.0
4    6.0
5    NaN


s.count()는 시리즈가 보유하고 있는 결측치를 제외한 유효한 데이터 개수를 counting한다. -> 4 출력

# nan값을 채우기 위해 fillna 입력
s.fillna(0) # 결측치를 0으로 치환한 새로운 시리즈 생성
s = s.fillna(0)   
s -> nan값이 다 0으로 바뀌어서 출력된다.

만약 nan에 값을 채우지않고 삭제한채로 출력하고 싶다면 
s = s.dropna() 사용
print(s) 입력시 
0    1.0
2    3.0
3    5.0
4    6.0
이렇게 출력된다.


- 특정날짜를 기준으로 DataFrame 생성해보기
datas = pd.date_range('20210628', periods=6)
datas 입력시
DatetimeIndex(['2021-06-28', '2021-06-29', '2021-06-30', '2021-07-01', '2021-07-02', '2021-07-03'],
              dtype='datetime64[ns]', freq='D') 출력
              
- 랜덤으로 행렬 만들어보기
np.random.randn(2,3)
실행시 (-)값과 (+)값 상관없이 무작위로 
*  *  *
*  *  * 와 같은 형태로 출력된다.



datas = pd.date_range('20210628', periods=6)
datas 출력시
  
DatetimeIndex(['2021-06-28', '2021-06-29', '2021-06-30', '2021-07-01', '2021-07-02', '2021-07-03'],
              dtype='datetime64[ns]', freq='D')
       이렇게 연속 6개가 출력된다.
       
       
# 실수의 난수 발생 함수
np.random.randn(2,3)

# 정수의 난수 발생 함수
np.random.randint(12) - 12까지의 수 중 무작위로 나온다.

# randn() : 구조 포함된 난수 발생
# rnadint() : 범위에 해당하는 하나의 정수값만 발생

np.random.randint(2,3) - 이 경우 2부터 3미만의 수만 출력하는 것이므로 2만 출력된다.


# 6행 4열의 구조로 날짜를 보유한 datas 변수값을 index로 구성하는 DataFrame 객체
# Pandas로 데이터 처리시에는 Numpy 모듈이 필수
df = pd.DataFrame(np.random.randn(6,4) , index=datas)
df 실행시

	              0	         1	      2        	3
2021-06-28	0.876989	0.886613	0.957213	1.869028
2021-06-29	-1.712901	0.642644	-0.620682	-0.232219
2021-06-30	0.451204	0.459130	1.583030	-0.001536
2021-07-01	0.160450	-0.845171	0.331468	0.277002
2021-07-02	0.776274	-0.767628	1.000853	0.387759
2021-07-03	-0.487914	1.389250	-0.853384	0.156461
위와 같은 표가 출력된다. 물론 표안의 값들은 실행할때마다 랜덤으로 값이 나온다.

# 컬럼명 가공
df = pd.DataFrame(np.random.randn(6, 4), index=datas,
                  columns=['a', 'b', 'c', 'd'])
