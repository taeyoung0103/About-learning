# multi_match : 여러개의 field 대상으로 검색
# 다중 field 중에 하나만이라도 포함되어 있다면 검색되는 로직
# 영문데이터인 경우 대소문자 구분 없음
GET movie_search/_search
{
  "query": {
    "multi_match": {
      "query": "family",
      "fields": ["movieNm", "movieNmEn"]
    }
  }
}


# 대표 장르가 코미디, 제작 국가는 한국인 영화중에 영화타입이 단편이 아닌 doc검색
GET movie_search/_search
{
  "query": {
    "bool": {
      "must": [
        {
          "term": {
            "repGenreNm": {
              "value": "코미디"
            }
          }
        },
        {
          "match": {
            "repNationNm": "한국"
          }
        }
      ],
      "must_not": [
        {
          "match": {
            "typeNm": "단편"
          }
        }
      ]
    }
  }
}


# prefix query - 전체를 치지 않아도 괜찮다.
GET movie_search/_search
{
  "query": {
    "prefix": {
      "movieNm": {
        "value": "살아남은"
      }
    }
  }
}

GET movie_search/_search
{
  "query": {
    "prefix": {
      "movieNm": {
        "value": "살"
      }
    }
  }
}


GET movie_search/_mapping

# openDt field 값만 검색
GET movie_search/_search
{
  "size":20,
  "_source": "openDt"
}

# null이 아닌 데이터만 검색
# openDt값이 존재하는 데이터만 출력
GET movie_search/_search
{
  "_source": "openDt",
  "query": {
    "exists":{
      "field": "openDt"
    }
  }
}


# * : 0~무한대, + : 1~무한대, ? : 없거나 하나이거나
# ES에서  ? : 철자하나
# wildcard(*)을 활용한 검색
# 장르 구분해서 검색
# '장'으로 시작하는 데이터만 출력
GET movie_search/_search
{
  "query": {
    "wildcard": {
      "typeNm": {
        "value": "장*"
      }
    }
  }
}

GET movie_search/_search
{
  "query": {
    "wildcard": {
      "typeNm": {
        "value": "장**"
      }
    }
  }
}

GET movie_search/_search
{
  "query": {
    "wildcard": {
      "typeNm": {
        "value": "장?"
      }
    }
  }
}

# ?? : 철자 2개이므로 0개가 출력된다.
GET movie_search/_search
{
  "query": {
    "wildcard": {
      "typeNm": {
        "value": "장??"
      }
    }
  }
}



DELETE string_index
PUT string_index
{
  "mappings": {
    "properties": {
      "data1" : {
        "type": "text"
      },
      "data2" : {
        "type": "keyword"
      }
    }
  }
}

GET string_index/_mapping
POST string_index/_doc/1
{
  "data1":"pink red blue",
  "data2":"pink red blue"
}

GET string_index/_search
{
  "query": {
    "match": {
      "data1": "pink"
    }
  }
}

# keyword 타입으로 term 단위로 검색 시도시 검색 불가
GET string_index/_search
{
  "query": {
    "match": {
      "data2": "pink"
    }
  }
}

GET string_index/_search
{
  "query": {
    "match": {
      "data2": "pink red blue"
    }
  }
}
