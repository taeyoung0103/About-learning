넘파이 (Numpy)
- http://www.numpy.org
- Numerical Python
- 고성능 과학연산을 위한 패키지로 데이터분석, 머신러닝등에 필수로 사용된다.
- 강력한 다차원 배열(array) 지원
- 벡터 연산 지원
- 다양한 수학관련 함수
- 선형대수, 난수 생성, 푸리에 변환 기능 지원

넘파이에서 데이터 구조
- 스칼라 (Scalar)
- - 하나의 숫자로 이루어진 데이터
- 벡터 (Vector)
- - 여러개의 숫자들을 특정한 순서대로 모아놓은 데이터 모음(데이터 레코드)
- - 1D Array (1차원 배열)
- 행렬 (Matrix)
- - 벡터들을 모아놓은 데이터 집합
- - 2D Array (2차원 배열)
- 텐서 (Tensor)
- - 같은 크기의 행렬들(텐서들)을 모아놓은 데이터 집합
- - ND Array (다차원 배열)

용어
- 축 (axis)
- - 값들의 나열 방향
- - 하나의 축(axis)는 하나의 범주(Category)이다.
- 랭크(rank)
- - 데이터 집합에서 축의 개수.
- 형태/형상(shape)
- - 각 축(axis) 별 데이터의 개수
- 크기(size)
- - 배열내 원소의 총 개수

이미지 - (개수-50, 길이-64, 넓이-64) -> 길이와 넓이가 64인것이 50개가 있는것


넘파이 배열(ndarray)
- n-dimension array => ndarray
- Numpy에서 제공하는 N 차원 배열 객체
- 같은 타입의 값들만 가질 수 있다.
- 빠르고 메모리를 효율적으로 사용하며 벡터 연산과 브로드캐스팅 기능을 제공한다.

차원 (dimension)
- Vector에서 차원 : 원소의 개수
- 넘파이 배열에서 차원 : 축의 개수


______________________________________________

# numpy  모듈을 import => 별칭은 관례적으로 np
import numpy as np

a1 = np.array([1,2,3]) # 기존 자료구조(array 행태)를 이용해 ndarray 생성
print(a1)
a1
-> array([1, 2, 3])

print(a1)
print(type(a1))
print(a1.dtype) #배열의 타입
print(a1.shape) #배열의 shape(형태 - 각축의 원소 수)
-> [1 2 3]
-> <class 'numpy.ndarray'>
-> int32
-> (3,)

a2 = np.array([1.1, 2.2, 3.3])
print(a2)
-> [1.1 2.2 3.3]

print(a2.dtype) #실수의 기본형: float64, 정수의 기본형: int32
-> float64

a3 = np.array([1.1, 2.2, 3.3], dtype=np.float32) #, dtype='float32')
print(a3.dtype)
-> float32

a4 = a2.astype(np.int32) #배열의 dtype을 변경하는 메소드(타입을 변환한 새로운 배열을 생성해서 반환.)
a4.dtype
-> dtype('int32') - 타입이 변경됨


l = [1, 10.5, True, "abc"] #리스트: 원소의 타입이 다를 수있다.
print(l)
-> [1, 10.5, True, 'abc']

a5 = np.array(l)
print(a5.dtype) #<U32 : 문자열
a5
-> array(['1', '10.5', 'True', 'abc'], dtype='<U32')


서로 다른 타입의 값들이용해서 ndarray를 생성하면 가장 큰 타입으로 통일해서 변환한다.
타입의 크기
-> bool < int < float < str

a7 = np.array([1, True, False]) #bool => 숫자 : True->1, False->0
a7
-> array([1, 1, 0])


l2 = [
    [1,2,3],
    [10,20,30],
    [100,200,300],
    [1000,2000,3000]
]
# len(l2)

import copy
l3 = copy.deepcopy(l2)



