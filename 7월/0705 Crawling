# html의 필수 표현법
'''
1. html 문서의 tree구조로 특정 tag 및 text data를 찾아가는 형식은 DOM 기반
2. DOM
    - Document Object Model
    - html 모든 요소(tag, 속성, text..)를 객체로 관리
    - 실시간 가변적인 동적 화면 구성에 필수 핵심 기술
    - 화면을 변경시키는 기술셋
    - 스펙 : w3c에서 제시, 이 dom 기술을 지원하는 개발 언어들은 모든 언어가 다 지원
    - 수업시간엔 js 기반의 dom 처리 학습중
    - id로 특정 tag검색 : document.getElementById("고유한 id")
    - next_sibling : 현 위치상에서 다음 동생 검색
    - 해킹 필수 기술

    
    . : class 속성의미 표기
    # : id 속성의미 표기
    이름 : tag명 의미 표기
'''



html = '''
<html>
    <body>
        <h1>스크래핑이란?</h1>
        <h1>스크래핑이란-------?</h1>
        <p id="one">웹페이지 1</p>
        <p id="two">웹페이지 2</p>
        <span class="redColor">
            <p>웹페이지3</p>
        </span>
        <ul>
            <li><a href="www.daum.net">다음</a></li>
            <li><a href="www.naver.com">네이버</a></li>
        </ul>        
    </body>
</html>
'''


# bs4 - html 문서를 tag, 속성, css 등으로 섬세하게 관리가능한 API
from bs4 import BeautifulSoup

# 크롤링 대상의 데이터와 구문해석, 문법체크, 변환가능한 parser 설정
soup = BeautifulSoup(html, 'html.parser')

print('--------2 : find 함수() ---------')
print(soup.find(id="one"))   # <p id="one">웹페이지 1</p>
print(soup.find(id="one").string)   # 웹페이지 1
print(soup.select('.redColor'))   # [<span class="redColor"> <p>웹페이지3</p> </span>]
print(soup.select('.redColor p'))  # [<p>웹페이지3</p>]
print(soup.select('.redColor p')[0])  # <p>웹페이지3</p>
print(soup.select('.redColor p')[0].string)  # 웹페이지3

'''
html css 속성은 중복 표현이 가능하다. -> 이름을 동일하게 적용해서 공통 ui
.redColor : class 속성이 redColor인 것들을 찾는다.
    하나 이상일 가능성이 있음. 따라서 list를 반환한다.

.redColor p
    여백을 기준으로 p는 class속성값이 redColor인 tag의 자식인 p tag,
    하위 tag가 하나만? 보장 불가하다. 즉 여러개가 존재할 가능성이 있다.
    따라서 list 타입으로 반환한다.

('.redColor p')[0]
    첫번쨰 해당하는 p tag 반환

('.redColor p')[0].string
    하위 text 데이터
'''

print('-----------1--------------')
print(soup.html.h1)

print(type(soup.html.p))   # <class 'bs4.element.Tag'>
print(soup.html.p)   # <p id="one">웹페이지 1</p>

# html(xml) 문서는 족보구조, 즉 tree 구조
# html 상에서 new line(br tag)은 text 자식으로 간주한다. 
# next_sibling : 현 위치상에서 다음 내 형제
'''
    <p id="one">웹페이지 1</p>
    <p id="two">웹페이지 2</p> 
'''
print(soup.html.p.next_sibling)   # new line, 즉 text 동생
print(soup.html.p.next_sibling.next_sibling)   # <p id="two">웹페이지 2</p> 

print(soup.html.span.p)   # <p>웹페이지3</p>

# text 데이터들은 string 속성명과 get_text() 함수로 착출
# html 문서의 span tag하위의 p tag 하위의 text 데이터
print(soup.html.span.p.string)   # 웹페이지3
print(soup.html.span.p.get_text())   # 웹페이지3






import requests
from bs4 import BeautifulSoup


html='''<!DOCTYPE html>
<html lang="ko">
<body>
  <div id="main-goods" role="page">
      <h1>과일과 야채</h1>
      <ul id="fr-list">
        <li class="red green" data-lo="ko">사과</li>
        <li class="purple" data-lo="us">포도</li>
        <li class="yellow" data-lo="us">레몬</li>
        <li class="yellow" data-lo="ko">오렌지</li>
      </ul>
      <ul id="ve-list">
        <li class="white green" data-lo="ko">무</li>
        <li class="red green" data-lo="us">파프리카</li>
        <li class="black" data-lo="ko">가지</li>
        <li class="black" data-lo="us">아보카도</li>
        <li class="white" data-lo="cn">연근</li>
      </ul>
  </div>
<body>
</html>'''

'''
어떻게 하면 아래와 같은 동일한 결과로 크롤링 가능한지?

레몬
아보카도
파프리카
아보카도
아보카도
아보카도
'''
soup = BeautifulSoup(html, 'html.parser')


print(soup.find_all("li", class_="yellow")[0].get_text())
print(soup.find_all("li", class_="black")[1].get_text())
print(soup.find_all("li", class_="red green")[1].get_text())
print(soup.find_all("li", class_="black")[1].get_text())
print(soup.find_all("li", class_="black")[1].get_text())
print(soup.find_all("li", class_="black")[1].get_text())


soup = BeautifulSoup(html, "html.parser")
# step01 : css 선택자로 데이터 추출하기 
# string 

# soup.select_one("li:nth-of-type(3)").string
# 해당 tag의 하위 지식 text를 의미하되, text인 경우에만 데이터 착출
print(soup.select_one("li:nth-of-type(3)").string)              # 레몬

# #ve-list > li:nth-of-type(4)
# #ve-list : id가 ve-list
# > : 하위 자식
# li:nth-of-type(4) : li tag의 4번째
print(soup.select_one("#ve-list > li:nth-of-type(4)").string)   # 아보카도

# [data-lo='us'] : data-lo='us'라는 속성 의미
# #ve-list > li[data-lo='us']
# id가 ve-list 하위의 모든 li tag중에서 속성명이 data-lo, 단 data-lo의 값이 us인 모든 tag를 list에 반환
# 배열 또는 list로 반환되었으니 선별해서 지정해서 사용, 여러개가 반환, 따라서 고유한 index로 구분해서 사용
print(soup.select("#ve-list > li[data-lo='us']")[0].string)     # 파프리카

# li tag의 class 속성 의미 : .-class 속성 의미
print(soup.select("#ve-list > li.black")[1].string)             # 아보카도

# step02 : find() 함수로 추출하기
# 속성이 하나 이상인 경우 적용하는 기술 : class="black" data-lo="us"
attDatas = {"data-lo":"us", "class":"black"}

# 두가지 속성을 보유하고 있는 li 라는 tag : soup.find("li", attDatas)
# soup.find("li", attDatas). : 하위 text 자식
print(soup.find("li", attDatas).string) # 아보카도

# step03 : find() 함수로 연속적으로 추출하기
# 메소드 또는 함수의 체이닝 기술
print(soup.find(id="ve-list").find("li", attDatas).string)  #아보카도


