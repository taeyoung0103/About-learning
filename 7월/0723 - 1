넘파이 (Numpy)
- http://www.numpy.org
- Numerical Python
- 고성능 과학연산을 위한 패키지로 데이터분석, 머신러닝등에 필수로 사용된다.
- 강력한 다차원 배열(array) 지원
- 벡터 연산 지원
- 다양한 수학관련 함수
- 선형대수, 난수 생성, 푸리에 변환 기능 지원

넘파이에서 데이터 구조
- 스칼라 (Scalar)
- - 하나의 숫자로 이루어진 데이터
- 벡터 (Vector)
- - 여러개의 숫자들을 특정한 순서대로 모아놓은 데이터 모음(데이터 레코드)
- - 1D Array (1차원 배열)
- 행렬 (Matrix)
- - 벡터들을 모아놓은 데이터 집합
- - 2D Array (2차원 배열)
- 텐서 (Tensor)
- - 같은 크기의 행렬들(텐서들)을 모아놓은 데이터 집합
- - ND Array (다차원 배열)

용어
- 축 (axis)
- - 값들의 나열 방향
- - 하나의 축(axis)는 하나의 범주(Category)이다.
- 랭크(rank)
- - 데이터 집합에서 축의 개수.
- 형태/형상(shape)
- - 각 축(axis) 별 데이터의 개수
- 크기(size)
- - 배열내 원소의 총 개수

이미지 - (개수-50, 길이-64, 넓이-64) -> 길이와 넓이가 64인것이 50개가 있는것


넘파이 배열(ndarray)
- n-dimension array => ndarray
- Numpy에서 제공하는 N 차원 배열 객체
- 같은 타입의 값들만 가질 수 있다.
- 빠르고 메모리를 효율적으로 사용하며 벡터 연산과 브로드캐스팅 기능을 제공한다.

차원 (dimension)
- Vector에서 차원 : 원소의 개수
- 넘파이 배열에서 차원 : 축의 개수


______________________________________________

# numpy  모듈을 import => 별칭은 관례적으로 np
import numpy as np

a1 = np.array([1,2,3]) # 기존 자료구조(array 행태)를 이용해 ndarray 생성
print(a1)
a1
-> array([1, 2, 3])

print(a1)
print(type(a1))
print(a1.dtype) #배열의 타입
print(a1.shape) #배열의 shape(형태 - 각축의 원소 수)
-> [1 2 3]
-> <class 'numpy.ndarray'>
-> int32
-> (3,)

a2 = np.array([1.1, 2.2, 3.3])
print(a2)
-> [1.1 2.2 3.3]

print(a2.dtype) #실수의 기본형: float64, 정수의 기본형: int32
-> float64

a3 = np.array([1.1, 2.2, 3.3], dtype=np.float32) #, dtype='float32')
print(a3.dtype)
-> float32

a4 = a2.astype(np.int32) #배열의 dtype을 변경하는 메소드(타입을 변환한 새로운 배열을 생성해서 반환.)
a4.dtype
-> dtype('int32') - 타입이 변경됨


l = [1, 10.5, True, "abc"] #리스트: 원소의 타입이 다를 수있다.
print(l)
-> [1, 10.5, True, 'abc']

a5 = np.array(l)
print(a5.dtype) #<U32 : 문자열
a5
-> array(['1', '10.5', 'True', 'abc'], dtype='<U32')


서로 다른 타입의 값들이용해서 ndarray를 생성하면 가장 큰 타입으로 통일해서 변환한다.
타입의 크기
-> bool < int < float < str

a7 = np.array([1, True, False]) #bool => 숫자 : True->1, False->0
a7
-> array([1, 1, 0])


l2 = [
    [1,2,3],
    [10,20,30],
    [100,200,300],
    [1000,2000,3000]
]
# len(l2)

import copy
l3 = copy.deepcopy(l2)

a9 = np.array([l2, l3])

print(a9.shape)
-> (2, 4, 3)

print(a9.size) #총 원소의 개수
-> 2*4*3 = 24

---------------------------------------------------------------

zeros(shape, dtype)
-> 영벡터(행렬) 생성 : 원소들을 0으로 채운 배열
-> -> shape : 형태(크기, 개수) 지정
-> -> dtype : 요소의 개수 지정

a1 = np.zeros((3,5))
a1
-> array([[0., 0., 0., 0., 0.],
       [0., 0., 0., 0., 0.],
       [0., 0., 0., 0., 0.]])
       
--------------------------------------------------

ones(shape, dtype)¶
-> 일벡터 생성 : 원소들을 1로 채운 배열
-> -> shape : 형태(크기, 개수) 지정
-> -> dtype : 요소의 개수 지정

a1 = np.ones((5,2))
a1
-> array([[1., 1.],
       [1., 1.],
       [1., 1.],
       [1., 1.],
       [1., 1.]])
       
--------------------------------------------

full(shape, fill_value, dtype))
-> 원소들을 원하는 값으로 채운 배열 생성
-> shape : 형태(크기, 개수) 지정
-> -> fill_vlaue : 채울 값
-> -> dtype : 요소의 개수 지정

a1 = np.full(10, fill_value=5)
a1
-> array([5, 5, 5, 5, 5, 5, 5, 5, 5, 5])

a2 = np.full((5,2), fill_value=7, dtype=np.float)
print(a2.shape)
-> (5, 2)
print(a2.dtype)
-> float64
a2
-> array([[7., 7.],
       [7., 7.],
       [7., 7.],
       [7., 7.],
       [7., 7.]])
       
------------------------------------------------------

xxx_like(배열)
-> zeros_like(), ones_like()
-> 매개변수로 받은 배열과 같은 shape의 0 또는 1로 값을 채운 배열을 생성.

-------------------------------------------------------

arange(start, stop, step, dtype)
start에서 stop 범위에서 step의 일정한 간격의 값들로 구성된 배열 리턴
-> API
-> start : 범위의 시작값으로 포함된다.(생략가능 - 기본값:0)
-> stop : 범위의 끝값으로 포함되지 않는다. (필수)
-> step : 간격 (기본값 1)
-> dtype : 요소의 타입
-> 1차원 배열만 생성가능

a1 = np.arange(1, 100, 10) #1<= num <100  증감: +10
print(a1.shape)
-> (10,)
a1
-> array([ 1, 11, 21, 31, 41, 51, 61, 71, 81, 91])

a4 = np.arange(100,0,-10) # num <= 100, num > 0 증감: -10
a4
-> array([100,  90,  80,  70,  60,  50,  40,  30,  20,  10])


------------------------------------------------------------------------------

linspace(start, stop, num=50, endpoint=True, retstep=False, dtype=None)
- 시작과 끝을 균등하게 나눈 값들을 가지는 배열을 생성
-> API
-> start : 시작값
-> stop : 종료값
-> num : 나눌 개수. 기본-50, 양수 여야한다.
-> endpoint : stop을 포함시킬 것인지 여부. 기본 True
-> retstep : 생성된 배열 샘플과 함께 간격(step)도 리턴할지 여부. True일경우 간격도 리턴(sample, step) => 튜플로 받는다.
-> dtype : 데이터 타입








