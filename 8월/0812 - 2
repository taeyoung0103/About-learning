

K-최근접 이웃 (K-Nearest Neighbors, K-NN)
    분류(Classification)와 회귀(Regression) 를 모두 지원한다.
    예측하려는 데이터와 input 데이터들 간의 거리를 측정해 가장 가까운 K개의 데이터셋의 레이블을 참조해 분류/예측한다.
    학습시 단순히 input 데이터들을 저장만 하며 예측 시점에 거리를 계산한다.
        학습은 빠르지만 예측시 시간이 많이 걸린다.

    K-NN에서 K는 새로운 데이터포인트를 분류할때 확인할 데이터 포인트의 개수를 지정하는 하이퍼파라미터
    K를 1로 하면 파란색, K를 3으로 하면 주황색 으로 분류한다.
    K가 너무 작으면 과적합(Overfitting)이 일어나고 K가 너무 크면 성능이 나빠진다. (Underfitting).


주요 하이퍼 파라미터
    이웃 수
        n_neighbors = K
        K가 작을 수록 모델이 복잡해져 과적합이 일어나고 너무 크면 단순해져 성능이 나빠진다.
        n_neighbors는 Feature수의 제곱근 정도를 지정할 때 성능이 좋은 것으로 알려져 있다.
    거리 재는 방법
        p=2: 유클리디안 거리(Euclidean distance - 기본값)
        p=1: 맨하탄 거리(Manhattan distance)


    요약
        K-NN은 이해하기 쉬운 모델이며 튜닝할 하이퍼파라미터의 수가 적어 빠르게 만들 수있다.
        K-NN은 서비스할 모델을 구현할때 보다는 복잡한 알고리즘을 적용해 보기 전에 확인용 또는 base line을 잡기 위한 모델로 사용한다.
        훈련세트가 너무 큰 경우(Feature나 관측치의 개수가 많은 경우) 거리를 계산하는 양이 늘어나 예측이 느려진다.
        Feature간의 값의 단위가 다르면 작은 단위의 Feature에 영향을 많이 받게 되므로 전처리로 Scaling작업이 필요하다.
        Feature가 너무 많은 경우와 대부분의 값이 0으로 구성된(희소-sparse) 데이터셋에서 성능이 아주 나쁘다

---------------------------------

위스콘신 유방암 데이터를 이용한 암환자분류
    K값 변화에 따른 성능 평가
        malignant: 악성
        benign : 양성


import pandas as pd
import numpy as np
from sklearn.datasets import load_breast_cancer
from sklearn.model_selection import train_test_split

X, y = load_breast_cancer(return_X_y=True)
X_train, X_test, y_train, y_test = train_test_split(X, y, stratify=y, random_state=0)
y_train.shape, y_test.shape

---------------------------

# KNN - Feature Scaling 전처리를 해준다.
from sklearn.preprocessing import MinMaxScaler
scaler = MinMaxScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

















