파이썬의 기본
  사칙연산
    + : 더하기,    1+1 = 2
    / : 나누기,     3/2 = 1.5
    % : 나누고 난 나머지,    5%3 = 2
    // : 나누고 난 나머지를 제거하는 연산자(몫),      5//3 = 1
    ** : 거듭제곱,  4**5 = 4*4*4*4*4 = 1024
  
  논리연산과 비교연산
    = : 할당연산자, 대입연산자                                name = "park", print(name) 실행시 park 출력
    == : 동등비교연산자, 값이 동일할 경우 True가 나온다.        1 == 1, print(1==1) 실행시 True 출력
    != : 부정연산자, 값이 다를경우 True가 나온다.              1 != 2, print(1 != 2) 실행시 True 출력, 
                                                             1 != 1, print(1 != 1) 실행시 False 출력
  문자열 중 소문자와 대문자는 다르다.
     print("a" == "A") 출력시 False 출력
  
  

반복문
  for : 정해진 횟수만큼 반복하는 구조
  while : 어떤 조건이 만족되는 동안, 반복을 계속하는 구조
  

키워드
  def - 사용자 정의 함수를 만들겠다는 선언구
    예) def sample -> sample 이라는 사용자 정의 함수를 만듬
  
  return - 함수 내부에서 해당 함수를 호출한 곳으로 값을 돌려주는 키워드
    예) def sample(x):
          if x < 5 :
            return x        -> x가 5미만이면 x값을 돌려준다.
            
  if - '만약 ~라는 조건일때' 라는 의미를 가지고있다.
  
  elif - 'if 조건이 아니고 다른조건일때' 라는 의미를 가지고 있다.
  
  else - 'if 조건과 else 조건 모두 아닌 나머지 조건일때' 라는 의미를 가지고 있다.
  
  
  
형변환 함수들
  int(숫자 or 계산식 or '문자열') : 정수로 변환
  str() : 문자열로 변환
  float(숫자 or 계산식 or '문자열') : 실수로 변환
  ord() : 문자열을 숫자로 계산
  
  예) d1 = 2, d2 = 'a', d3 = 3.5 로 가정해보자
    이 경우 print(type(d1), type(d2), type(d3)) 를 실행하면 각각 <class 'int'> <class 'str'> <class 'float'> 이 출력된다.
    즉, d1은 정수, d2는 문자열, d3는 실수의 형태를 가지고 있다는 의미이다.
    
    이번엔 각각의 형태를 바꿔보겠다.
    print(type(str(d1)), type(ord(d2)), type(int(d3))) 실행시 각각 <class 'str'> <class 'int'> <class 'int'> 가 출력된다.
    또한 print((str(d1), ord(d2), int(d3)) 실행시 각각 2, 97, 3 이 출력된다.
    a가 97이 된 이유는 소문자 a가 숫자로 97로 표기되며, 실수 3.5는 정수로 변환시 소수점아래가 삭제되어 3으로 표기된다.
    
    
 List
  list3 = [1, "안녕", "Python", 2] 를 만들어보겠다.
  먼저 list3는 리스트형이므로 print(type(list3)) 실행시 <class 'list'>가 출력됨을 확인할 수 있다.
  
  다음으로 범위이다.
  print(list3[1:3]) 실행시 ["안녕", "Python"]이 실행된다.
  이유는 앞에 숫자 1은 1번쨰 인덱스부터를 의미하고 3은 3번째 인덱스 바로전까지를 의미한다.
  그러므로 1, 2번째 인덱스가 출력되는데, [1, "안녕"]이 아닌 이유는 첫번째는 1이 아닌 0으로 계산하므로 list3에 1은 0번째 인덱스이다.
  
  생성자
  위의 list3에 있는 인덱스들중 하나를 바꾸고 싶을때 사용한다.
  예를 들어 2번쨰 인덱스인 "Python"을 99로 바꾸고 싶을경우 간단히 list3[2] = 99 를 입력하면 된다.
  이를 실행하고 다시 print(list3)을 실행하면 [1, "안녕", 99, 2]가 출력됨을 확인 할 수 있다.
  
  
Tuple
  list와 달리 Tuple은 속해있는 값들을 변경할 수 없다. ()로 설정가능하다.
  예) tup  = ("안녕", "Python", 2) 을 만들고 print(tup) 실행시 ('안녕', 'Python', 2) 가 출력된다.
    print(type(tup)) 실행하면 <class 'tuple'>이 출력된다. 
    또한 print(tup[0]) 실행시 '안녕'이 출력됨을 볼 수있다.
    
  그러나 위에 list와 같이 값을 변환하고 싶다고 tup[0] = "hello" 를 실행하면 에러가 나오는데, 이는 안의 값들을 변환할 수 없는 tuple의 고유 특성때문이다.
  
  

부분 집합 & 합집합 연산
  issubset() - 부분 집합 여부 검사
  issuperset() - 상위집합 여부 검사

  union() - 합집합
  intersection() - 교집합, & 연산자 사용 가능
  difference() - 차집합, - 연산자 사용 가능
