<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
</head>
<body>
    <script>
        //step02 - var/let/const 차이점 비교 
        /*  함수 내부의 조건식 내부에서 변수들 선언 후에 조건식 블록 벗어나서 출력 
        */
        function myfun3(){

            if (2 == 2) {
                var v2 = 2;    //함수 내부의 어디에 선언되어 있던 함수 내부에서 사용 가능 
                let v3 = '3';  //let 으로 선언된 변수는 선언된 블록 내에서만 호출 가능한 변수 
                const v4 = 4;  //상수 값 변경 절대 불가, 선언된 블록 내에서만 호출 가능한 변수
                v3 = 10; //이미 존재하는 변수 호출
                // v4 = 10;  문법 오류
                console.log(v3);
            }

            // console.log(v2);   //var로 선언되어 있던 변수 따라서 함수 내부에서 호출 가능
            // console.log(v3);  let 으로 선언된 변수는 block scope 즉 선언된 {} 내에서만 사용 가능
            console.log(v4);
        }
        myfun3();


        //step01 - js의 변수 선언시의 특징에 따른 학습

        //사용자 정의 함수 구현 문법
        function myfun(){
            v1 = 1;       //전역 변수로 선언, 다른 영역에서도 호출 가능
            var v2 = 2;   //로컬 변수로 선언, 이 함수 이외에는 호출 불가 
            let v3 = '3'; //로컬 변수로 선언, 이 함수 이외에는 호출 불가 
            const v4 = 4; //로컬 변수로 선언, 이 함수 이외에는 호출 불가 

            console.log(v1);
        } //19라인 실행시 v2, v3, v4는 소멸되는 로컬 변수
        
        // myfun();  //구현만 되어 있던 함수 호출 문법
        
        //새로운 함수를 구현 - myfun()에서 이미 선언된 변수를 호출 
        function myfun2(){
            console.log(v1);  //myfun()에서 선언된 변수 사용 가능
            // console.log(v2);  //myfun()에서 선언된 변수 사용 불가
            // console.log(v3);  //myfun()에서 선언된 변수 사용 불가
            console.log(v4);  //myfun()에서 선언된 변수 사용 불가
        }
        // myfun2();
    </script>
</body>
</html>

<!--

학습내용
1. 사용자 정의 단순 함수구현 문법
2. var / let / const 키워드 구분 
    let/const는 선언된 block scope 내에서만 사용 가능한 견고한 키워드
    const : 상수 의미
    구글은 수정가능성이 없는 변수들은 const 사용 권장, 브라우저에서 실행되는 속도가 빠르다고 함

-->
