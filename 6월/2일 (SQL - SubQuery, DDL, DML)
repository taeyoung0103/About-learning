subQuery.sql

-- select문 내에 포함된 또 다른 select문 작성 방법
-- 참고 : join 또는 subquery로 동일한 결과값 검색

-- 문법 : 비교 연산자(대소비교, 동등비교) 오른쪽에 () 안에 select문 작성 
--	   : create 및 insert 에도 사용 가능
--	   : tip - 개발시 다수의 test 위해서 원본이 아닌 복사본 table활용 권장 
-- 실행순서 : sub query가 main 쿼리 이전에 실행


--1. SMITH라는 직원 부서명 검색
select dname
from emp, dept
where ename='SMITH' and emp.deptno = dept.deptno; 

-- sub query
-- SMITH사원 부서번호 검색후에 해당번호와 일치되는 
-- 부서 테이블의 부서번호와 일치되는 부서명 검색

select dname
from emp, dept
where deptno = (
	select deptno from emp where ename = 'SMITH'
);

--2. SMITH와 동일한 직급(job)을 가진 사원들의 모든 정보 검색(SMITH 포함)

select * 
from emp
where job = (
	select job from emp where ename = 'SMITH'
);

-- 2-2. SMITH와 동일한 직급(job)을 가진 사원들의 모든 정보 검색(SMITH 미포함)
select * 
from emp
where job = (
	select job from emp where ename = 'SMITH'
) and ename != 'SMITH';


--3. SMITH와 급여가 동일하거나 더 많은(>=) 사원명과 급여 검색
-- SMITH 제외해서 검색하기

select ename, sal
from emp
where sal >= (
	select sal from emp where ename = 'SMITH'
) and ename != 'SMITH';

--4. DALLAS에 근무하는 사원의 이름, 부서 번호 검색

select ename, deptno
from emp
where deptno = (
	select deptno
	from dept
	where loc = 'DALLAS'
	);


--5. 평균 급여보다 더 많이 받는(>) 사원만 검색

select ename, sal
from emp
where sal > (
	select avg(sal) from emp
);

-- 1~5번까지는 sub query의 결과가 단일
-- 즉, 단일 결과값


-- 다중행 서브 쿼리(sub query의 결과값이 하나 이상)
-- 6.급여가 3000이상 사원이 소속된 부서에 속한  사원이름, 급여 검색
	--급여가 3000이상 사원의 부서 번호
	-- in

select ename, sal, deptno 
from emp
where sal >= 3000;

select ename, sal, deptno
from emp
where deptno in (10, 20);

select ename, sal, deptno 
from emp
where deptno in (
	select deptno
	from emp
	where sal >= 3000
) ;


--7. in 연산자를 이용하여 부서별로 가장 급여를 많이 받는 사원의 정보(사번, 사원명, 급여, 부서번호) 검색

-- 먼저 in에 들어갈 구문
select deptno, max(sal)
from emp
group by deptno;


select empno, ename, deptno, sal
from emp
where (deptno, sal) in (
	select deptno, max(sal)
	from emp
	group by deptno
);
	
--8. 직급(job)이 MANAGER인 사람이 속한 부서의 부서 번호와 부서명(dname)과 지역검색(loc)

select dname, loc, deptno
from dept
where deptno in (
	select deptno
	from emp
	where job = 'MANAGER'
);


_________________________________________________________

DDL.sql

-- DDL(Data Definition Language) : 데이터 정의 언어
-- table 생성(create)과 삭제(drop), table 구조 수정(alter)

/*
[1] table 생성 명령어
    create table table명(
		칼럼명1 칼럼타입[(사이즈)] [제약조건] ,
		칼럼명2....
    ); 

[2] table 삭제 명령어
	drop table table명;

[3] table 구조 수정 명령어
	- 서비스 중에 table 구조 변경은 엄청난 일
	alter table table명 ..
*/

--1. table삭제 
drop table test;

-- 불필요한 table 정리
purge recyclebin;


--2. table 생성  
-- name(varchar2(20byte)), age(number(3)) 칼럼 보유한 people table 생성
create table people(
	name varchar2(20),
	age number(2)
);


-- 3. 서브 쿼리 활용해서 emp01 table 생성
-- (이미 존재하는 table기반으로 생성)
-- emp table의 모든 데이터로 emp01 생성


-- 4. 서브쿼리 활용해서 특정 칼럼(empno)만으로 emp02 table 생성
drop table emp01;

create table emp01 as select * from emp;
desc emp01;
select * from emp01;

drop table emp02;
create table emp02 as select empno from emp;
desc emp02;
select * from emp02;


--5. ?deptno=10 조건문 반영해서 empno, ename, deptno로 
-- emp03 table 생성
drop table emp03;

create table emp03 as select empno, ename, deptno 
from emp
where deptno=10;

desc emp03;
select * from emp03;


-- 6. ? 데이터 insert없이 table 구조로만 새로운 emp04 table생성시 
-- 사용되는 조건식 : where=거짓

drop table emp04;
create table emp04 as select * from emp where 1=0;
desc emp04;
select * from emp04;



-- emp01 table로 실습해 보기

-- alter 명령어로 이미 존재하는 table의 구조를 조작

--7. emp01 table에 job이라는 특정 칼럼 추가(job varchar2(10))
-- 이미 데이터를 보유한 table에 새로운 job칼럼 추가 가능 
-- add() : 컬럼 추가 함수

desc emp01;
drop table emp01;
create table emp01 as select empno, ename from emp;
desc emp01;

-- job 컬럼 추가(add(컬럼명 타입(사이즈)))
alter table emp01 add (job varchar2(10));

desc emp01;
select * from emp01;


--8. 이미 존재하는 칼럼 사이즈 변경 시도해 보기
-- 데이터 미 존재 칼럼의 사이즈 크게 또는 작게 수정 가능
-- modify(컬러명 타입(크기))

desc emp01;
alter table emp01 modify(job varchar2(20));
desc emp01;

desc emp01;
alter table emp01 modify(job varchar2(10));
desc emp01;


--9. 이미 데이터가 존재할 경우 칼럼 사이즈가 큰 사이즈의 컬럼으로 변경 가능 
-- 혹 사이즈 감소시 주의사항 : 
-- 			이미 존재하는 데이터보다 적은 사이즈로 변경 절대 불가
		-- 데이터 크기 보다 컬럼 사이즈를 적게 변경시도는 데이터 손실하려는 악행!!!
		-- RDBMS는 절대 허락하지 않음 
drop table emp01;
create table emp01 as select empno, ename, job from emp;
select * from emp01;
desc emp01;
 
-- 기존 컬럼 사이즈보다 크게 수정
alter table emp01 modify(job varchar2(20));
desc emp01;
select * from emp01;

-- 기존 컬럼 및 데이터 사이즈보다 작게 수정
-- 오류 왜? 데이터 크기보다 작게 수정 시도는 무조건 실패
alter table emp01 modify(job varchar2(5));
desc emp01;
select * from emp01;

alter table emp01 modify(job varchar2(10));
desc emp01;
select * from emp01;

--10. job 칼럼 삭제 
-- 데이터 존재시에도 자동 삭제 
-- drop 
-- drop시에 필요 정보 : 1번 - 컬럼명만


desc emp01;
alter table emp01 drop column job;
desc emp01;
select * from emp01;

--11. emp01을 test01로 table 이름 변경
rename emp01 to test01;
desc emp01;
desc test01;

--12. table의 순수 데이터만 완벽하게 삭제하는 명령어 
truncate table test01;

-- 12-1 단계 : table의 데이터만 삭제 -> 검색 -> 복원 -> 검색
	-- 삭제 도 가능, 복원도 가능
	-- 복원시 명령어 : >rollback;

	-- rollback은 영구 저장된 시점이 A라 가정 ...insert/update/delete... rollback시 A지점까지 복구
select * from test01;
delete from test01;
rollback;  -- 복원 명령어
select * from test01;

-- 12-2단계 : table의 데이터만 삭제 -> 검색 -> 복원 -> 검색
	-- 삭제후 데이터 복원 불가 !!!!!

select * from test01;
truncate table test01;
rollback;   -- 의미없음
select * from test01; -- 데이터 없음
-- 12-3. 참고 drop table 은 복원 불가 


______________________________________________________________

DML.sql
/* 
- DML : Data Mainpulation Language
            데이터 조작 언어
	   (select/insert/update/delete 모두 다 DML)
	   - 이미 존재하는 table에 데이터 저장, 수정, 삭제, 검색 
*/

--8.DML.sql
/* 
- DML : Data Mainpulation Language
            데이터 조작 언어
	   (select/insert/update/delete 모두 다 DML)
	   - 이미 존재하는 table에 데이터 저장, 수정, 삭제, 검색 


- * transaction 관점에서의 차이점
DML과 DDL은 다름
	- DML은 commit & rollback 유효한 명령어(데이터 복원 가능)

	- DDL(create/drop/alter)은 commit & rollback 무효한 명령어

		insert all 
			into people values('승목님', 11)
			into people values('승목님2', 1)
		select * from dual;





1. insert sql문법
	1-1. 모든 칼럼에 데이터 저장시 
		- table 구조상의 컬럼 순서에 맞게 모든 데이터 저장시 사용하는 문법
		- 컬럼명 명시 생략 
		insert into table명 values(데이터값1, ...)

	1-2.  특정 칼럼에만 데이터 저장시,
		명확하게 칼럼명 기술해야 할 경우 
		insert into table명 (칼럼명1, ...) values(칼럼과매핑될데이터1...)

	1-3. 하나의 sql문장으로 다수의 table에 데이터 입력 방법
		insert all 
			into table명 [(칼럼명,...)] values(데이터,,,)		
		select 검색칼럼 from....;

2. update 
	2-1. 모든 table(다수의 row)의 데이터 한번에 수정
		- where조건문 없는 문장
		- update table명 set 칼럼명=수정데이타;

	2-2. 특정 row값만 수정하는 방법
		- where조건문으로 처리하는 문장
		- update table명 set 칼럼명=수정데이타 where 조건sql;

3. delete
	3-1. table의 모든 데이터 삭제
		delete from table명;
		delete table명;

	3-2. 조건 부합하는 데이터만 삭제
		delete from table명 where 조건식;
		delete table명 where 조건식;

4. merge(병합)
	- 다수의 table 데이터를 하나로 병합하는 구조
	- syntax
		merge into 병합받을 table명 별칭
		using 이미 데이터를 보유한 table명 별칭
		on 조건식(병합받을 table.기준컬럼=데이터를 제공할 table.컬럼)
		when matched then
			true인 경우 실행(update)
		when not matched then
			false인 경우 실행(insert)

*/

drop table people;



create table people(
	name varchar2(10),
	age number(3)
);

desc people;


-- *** insert ****
--1. 칼럼명 기술없이 데이터 입력
-- table에 존재하는 모든 칼럼에 값 저장 의미
-- 주의사항 : desc table명으로 검색된 컬럼 순서에 맞게 데이터 세팅

insert into people values ('park', 16);
insert into people values (16, 'park');


--2. 칼럼명 기술후 데이터 입력 
-- 컬럼명 명시 따라서 데이터 저장순서는 insert작업하는 사람이 편집
insert into people (name, age) values ('you', 16);



--3. 다중 table에 한번에 데이터 insert하기 
drop table emp01;
drop table emp02;
create table emp01 as select empno, ename, deptno from emp where 1=0;
create table emp02 as select empno, ename, deptno from emp where 1=0;
select * from emp01;
select * from emp02;



-- table 존재, 단 데이터가 없는 상태, 데이터 insert
insert all
	into emp01	values(empno, ename, deptno)
	into emp02	values(empno, ename, deptno)
select empno, ename, deptno from emp;

select * from emp01;
select * from emp02;


--4. ? 부서 번호가 10인 데이터는 emp01에 저장, 
-- 부서 번호가 20 or 30인 데이터는 emp02에 저장
-- 조건 표현 : when : 조건식,  ~then : 조건식이 true인 경우 실행

-- 데이터만 삭제 - rollback으로 복구 불가능한 데이터 삭제 명령어
truncate table emp01;
truncate table emp02;

select * from emp01;

insert all
	when deptno=10 then
		into emp01 values (empno, ename, deptno)
	when deptno=20 or deptno=30 then
		into emp02 values (empno, ename, deptno)
select empno, ename, deptno from emp;

select * from emp01;
select * from emp02;

--? (급 문제) 오늘 같은 소회의실 팀원들 정보를 저장해보기
-- empno와 deptno는 임시로 설정, ename은 동기 이름으로 저장하기
-- values (내가 데이터 3개 구성하기)

rollback;

insert into emp01 values ('이유경', 21) ('정일균', 22) ('손유진', 23);

insert all
	into emp01 values(21, '이유경', 21)
	into emp01 values(22, '정일균', 22)
select * from dual;


select departments

select * from emp01;


-- *** update ***
--1. 테이블의 모든 행 변경
drop table emp01;
create table emp01 as select * from emp;
select deptno from emp01;

-- 모든 deptno를 100으로 수정
-- 어떤 table에 어떤 컬럼을 어떤 데이터로?

update emp01 set deptno=99;
select deptno from emp01;

-- 이전의 데이터로 복원

rollback;


--2. ? emp01 table의 모든 사원의 급여를 10%(sal*1.1) 인상하기
--? emp table로 부터 empno, sal, hiredate, ename 순으로 table 생성
drop table emp01;

create table emp01 as select empno, sal, hiredate, ename from emp;
desc emp01;
select * from emp01;

update emp01 set sal=sal*1.1;
select * from emp01;

--3. emp01의 모든 사원의 입사일을 오늘(sysdate)로 바꿔주세요

update emp01 set hiredate=sysdate;
select * from emp01;


-- 4. 급여가 3000이상(where sal >= 3000)인 사원의 급여만 10%인상

update emp01 set sal=sal*1.1 where sal>=3000;
select * from emp01;



--5. ?emp01 table 사원의 급여가 1000이상인 사원들의 급여만 500원씩 삭감 
-- insert/update/delete 문장에 한해서만 commit과 rollback 영향을 받음

update emp01 set sal=sal-500;
select * from emp01;



--6. emp01 table에 DALLAS(dept의 loc)에 위치한 부서의 소속 사원들의 급여를 1000인상
-- 서브쿼리 사용
drop table emp01;
create table emp01 as select * from emp;
select * from emp01;

update emp01
set sal=sal+1000
where deptno=(
	select deptno
	from dept
	where loc='DALLAS'
);

select * from emp01;

select * from emp01;



--7. emp01 table의 SMITH 사원의 부서 번호를 30으로, 직급은 MANAGER 수정
-- 두개 이상의 칼럼값 동시 수정
select deptno, job from emp01 where ename='SMITH';

update emp01
set deptno=30, job='MANAGER'
where ename='SMITH'

select deptno, job from emp01 where ename='SMITH';


-- *** delete ***
--8. 하나의 table의 모든 데이터 삭제
select * from emp01;
delete from emp01;
select * from emp01;
rollback;
select * from emp01;
delete emp01;
select * from emp01;


--9. 특정 row 삭제(where 조건식 기준)

rollback;

select * from emp01;
delete from emp01 where deptno=30;
select * from emp01;

rollback;


--10. emp01 table에서 comm 존재 자체가 없는(null) 사원 모두 삭제

select * from emp01;
delete from emp01 where comm is null;
select * from emp01;

rollback;

select * from emp01;

--11. emp01 table에서 comm이 null이 아닌 사원 모두 삭제

select * from emp01;
delete from emp01 where comm is not null;
select * from emp01;

rollback;

select * from emp01;

--12. emp01 table에서 부서명이 RESEARCH 부서에 소속된 사원 삭제 
-- 서브쿼리 활용
select * from emp01;

delete from emp01 
where(select deptno from emp01 where dname='RESEARCH');
select * from emp01;

rollback;

--13. table내용 삭제

delete from emp01;
rollback;
truncate table emp01;



-- *** merge[병합] ***
--14. 병합을 위한 test table생성 및 데이터 insert
-- 판매 관련 table들
drop table produce01;
drop table produce02;
drop table produce_total;

create table produce01(
	판매번호 varchar2(5), 
	제품번호 char(4),
	수량 number(3),
	금액 number(5)
);
create table produce02(
	판매번호 varchar2(5), 
	제품번호 char(4),
	수량 number(3),
	금액 number(5)
);
create table produce_total(
	판매번호 varchar2(5), 
	제품번호 char(4),
	수량 number(3),
	금액 number(5)
);

-- *** merge[병합] ***
--14. 병합을 위한 test table생성 및 데이터 insert
/*
produce01과 produce02는 새로 개발한 제품들 관리 table
produce_total : 재고관리 table

제품이 새로 생산 produce01과 produce02는 insert
produce_total 새로운 데이터 유입시에는 insert 
	/ 이미 존재하는 데이터는 update를 해야 하는 상황
*/


-- test용 데이터 insert
insert all
	into produce01 values('101', '1001', 1, 500)
	into produce01 values('102', '1002', 1, 400)
	into produce01 values('103', '1003', 1, 300)
	into produce02 values('201', '1004', 1, 500)
	into produce02 values('202', '1005', 1, 600)
	into produce02 values('203', '1006', 1, 700)
select * from dual;

commit; -- 영구저장, rollback 해도 insert되어있는 데이터 삭제 안됨
select * from produce01;
select * from produce02;
select * from produce_total;


-- merge 작업 : produce01과 produce_total 병합
-- ? 문법 이해를 위한 문제 분석해 보기 
select * from produce_total;

merge into produce_total t
using produce01 p1
on (t.판매번호 = p1.판매번호)
when matched then
	update set t.수량 = t.수량+p1.수량
when not matched then 
	insert values(p1.판매번호, p1.제품번호, p1.수량, p1.금액);

-- 실행 결과 확인
select * from produce_total;



--? produce02 table과 produce_total table 병합 
select * from produce_total;

merge into produce_total t
using produce02 p2
on (t.판매번호 = p2.판매번호)
when matched then
	update set t.수량 = t.수량+p2.수량
when not matched then 
	insert values(p2.판매번호, p2.제품번호, p2.수량, p2.금액);

select * from produce_total;





